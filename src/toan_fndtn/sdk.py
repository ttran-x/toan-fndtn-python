"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, ClientOwner, HttpClient, close_clients
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
import importlib
from toan_fndtn import models
from toan_fndtn._hooks import SDKHooks
from toan_fndtn.types import OptionalNullable, UNSET
from typing import Any, Callable, Optional, TYPE_CHECKING, Union, cast
import weakref

if TYPE_CHECKING:
    from toan_fndtn.application import Application
    from toan_fndtn.auth import Auth
    from toan_fndtn.classification_sdk import ClassificationSDK
    from toan_fndtn.compute_sdk import ComputeSDK
    from toan_fndtn.data_object import DataObject
    from toan_fndtn.data_product import DataProduct
    from toan_fndtn.data_source import DataSource
    from toan_fndtn.data_system import DataSystem
    from toan_fndtn.element import Element
    from toan_fndtn.iam import Iam
    from toan_fndtn.link import Link
    from toan_fndtn.mesh_sdk import MeshSDK
    from toan_fndtn.orchestrator_workflow_sdk import OrchestratorWorkflowSDK
    from toan_fndtn.organization_management import OrganizationManagement
    from toan_fndtn.role_based_identity import RoleBasedIdentity
    from toan_fndtn.role_management import RoleManagement
    from toan_fndtn.search import Search
    from toan_fndtn.sensitivity_sdk import SensitivitySDK
    from toan_fndtn.service_info import ServiceInfo
    from toan_fndtn.user_based_identity import UserBasedIdentity
    from toan_fndtn.user_sdk import UserSDK


class ToanFndtn(BaseSDK):
    r"""FNDTN Backend: Foundation API schema"""

    application: "Application"
    classification: "ClassificationSDK"
    data_system: "DataSystem"
    data_product: "DataProduct"
    link: "Link"
    data_object: "DataObject"
    data_source: "DataSource"
    mesh: "MeshSDK"
    search: "Search"
    compute: "ComputeSDK"
    sensitivity: "SensitivitySDK"
    element: "Element"
    orchestrator_workflow: "OrchestratorWorkflowSDK"
    organization_management: "OrganizationManagement"
    auth: "Auth"
    role_management: "RoleManagement"
    user: "UserSDK"
    role_based_identity: "RoleBasedIdentity"
    user_based_identity: "UserBasedIdentity"
    iam: "Iam"
    service_info: "ServiceInfo"
    _sub_sdk_map = {
        "application": ("toan_fndtn.application", "Application"),
        "classification": ("toan_fndtn.classification_sdk", "ClassificationSDK"),
        "data_system": ("toan_fndtn.data_system", "DataSystem"),
        "data_product": ("toan_fndtn.data_product", "DataProduct"),
        "link": ("toan_fndtn.link", "Link"),
        "data_object": ("toan_fndtn.data_object", "DataObject"),
        "data_source": ("toan_fndtn.data_source", "DataSource"),
        "mesh": ("toan_fndtn.mesh_sdk", "MeshSDK"),
        "search": ("toan_fndtn.search", "Search"),
        "compute": ("toan_fndtn.compute_sdk", "ComputeSDK"),
        "sensitivity": ("toan_fndtn.sensitivity_sdk", "SensitivitySDK"),
        "element": ("toan_fndtn.element", "Element"),
        "orchestrator_workflow": (
            "toan_fndtn.orchestrator_workflow_sdk",
            "OrchestratorWorkflowSDK",
        ),
        "organization_management": (
            "toan_fndtn.organization_management",
            "OrganizationManagement",
        ),
        "auth": ("toan_fndtn.auth", "Auth"),
        "role_management": ("toan_fndtn.role_management", "RoleManagement"),
        "user": ("toan_fndtn.user_sdk", "UserSDK"),
        "role_based_identity": ("toan_fndtn.role_based_identity", "RoleBasedIdentity"),
        "user_based_identity": ("toan_fndtn.user_based_identity", "UserBasedIdentity"),
        "iam": ("toan_fndtn.iam", "Iam"),
        "service_info": ("toan_fndtn.service_info", "ServiceInfo"),
    }

    def __init__(
        self,
        server_url: str,
        bearer: Optional[Union[Optional[str], Callable[[], Optional[str]]]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param bearer: The bearer required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        client_supplied = True
        if client is None:
            client = httpx.Client()
            client_supplied = False

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        async_client_supplied = True
        if async_client is None:
            async_client = httpx.AsyncClient()
            async_client_supplied = False

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        security: Any = None
        if callable(bearer):
            # pylint: disable=unnecessary-lambda-assignment
            security = lambda: models.Security(bearer=bearer())
        else:
            security = models.Security(bearer=bearer)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                client_supplied=client_supplied,
                async_client=async_client,
                async_client_supplied=async_client_supplied,
                security=security,
                server_url=server_url,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self.sdk_configuration = hooks.sdk_init(self.sdk_configuration)

        weakref.finalize(
            self,
            close_clients,
            cast(ClientOwner, self.sdk_configuration),
            self.sdk_configuration.client,
            self.sdk_configuration.client_supplied,
            self.sdk_configuration.async_client,
            self.sdk_configuration.async_client_supplied,
        )

    def __getattr__(self, name: str):
        if name in self._sub_sdk_map:
            module_path, class_name = self._sub_sdk_map[name]
            try:
                module = importlib.import_module(module_path)
                klass = getattr(module, class_name)
                instance = klass(self.sdk_configuration)
                setattr(self, name, instance)
                return instance
            except ImportError as e:
                raise AttributeError(
                    f"Failed to import module {module_path} for attribute {name}: {e}"
                ) from e
            except AttributeError as e:
                raise AttributeError(
                    f"Failed to find class {class_name} in module {module_path} for attribute {name}: {e}"
                ) from e

        raise AttributeError(
            f"'{type(self).__name__}' object has no attribute '{name}'"
        )

    def __dir__(self):
        default_attrs = list(super().__dir__())
        lazy_attrs = list(self._sub_sdk_map.keys())
        return sorted(list(set(default_attrs + lazy_attrs)))

    def __enter__(self):
        return self

    async def __aenter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.client is not None
            and not self.sdk_configuration.client_supplied
        ):
            self.sdk_configuration.client.close()
        self.sdk_configuration.client = None

    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if (
            self.sdk_configuration.async_client is not None
            and not self.sdk_configuration.async_client_supplied
        ):
            await self.sdk_configuration.async_client.aclose()
        self.sdk_configuration.async_client = None
