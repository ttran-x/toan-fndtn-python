"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from toan_fndtn import errors, models, utils
from toan_fndtn._hooks import HookContext
from toan_fndtn.types import OptionalNullable, UNSET
from toan_fndtn.utils import get_security_from_env
from toan_fndtn.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, List, Mapping, Optional


class Search(BaseSDK):
    def search_entities_api_data_search_get(
        self,
        *,
        x_org: str,
        query: OptionalNullable[str] = UNSET,
        entity_type: OptionalNullable[List[models.EntityType]] = UNSET,
        sort_by: Optional[models.EntitySearchSortColumns] = None,
        sort_direction: Optional[models.BackendDataConstantSortDirection] = None,
        owner: OptionalNullable[str] = UNSET,
        created_at_from: OptionalNullable[datetime] = UNSET,
        created_at_to: OptionalNullable[datetime] = UNSET,
        limit: Optional[int] = 50,
        offset: Optional[int] = 0,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.EntitySearchResults:
        r"""Search entities

        Search for entities

        Args:
        -----
        request: fastapi.Request
        context: RequestContext
        query: Search query
        entity_types: List of entity types to query
        limit: Results limit
        offset: Results offset
        access_validator: AccessValidator
        token: Token
        data_product_filter: BrowseFilter
        application_filter: BrowseFilter
        data_object_filter: BrowseFilter
        data_source_filter: BrowseFilter
        data_system_filter: BrowseFilter

        Returns:
        --------
        common.EntitySearchResults: List of entity search results

        :param x_org:
        :param query:
        :param entity_type:
        :param sort_by:
        :param sort_direction:
        :param owner:
        :param created_at_from:
        :param created_at_to:
        :param limit:
        :param offset:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchEntitiesAPIDataSearchGetRequest(
            query=query,
            entity_type=entity_type,
            sort_by=sort_by,
            sort_direction=sort_direction,
            owner=owner,
            created_at_from=created_at_from,
            created_at_to=created_at_to,
            limit=limit,
            offset=offset,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request(
            method="GET",
            path="/api/data/search",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="search_entities_api_data_search_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.EntitySearchResults, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def search_entities_api_data_search_get_async(
        self,
        *,
        x_org: str,
        query: OptionalNullable[str] = UNSET,
        entity_type: OptionalNullable[List[models.EntityType]] = UNSET,
        sort_by: Optional[models.EntitySearchSortColumns] = None,
        sort_direction: Optional[models.BackendDataConstantSortDirection] = None,
        owner: OptionalNullable[str] = UNSET,
        created_at_from: OptionalNullable[datetime] = UNSET,
        created_at_to: OptionalNullable[datetime] = UNSET,
        limit: Optional[int] = 50,
        offset: Optional[int] = 0,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.EntitySearchResults:
        r"""Search entities

        Search for entities

        Args:
        -----
        request: fastapi.Request
        context: RequestContext
        query: Search query
        entity_types: List of entity types to query
        limit: Results limit
        offset: Results offset
        access_validator: AccessValidator
        token: Token
        data_product_filter: BrowseFilter
        application_filter: BrowseFilter
        data_object_filter: BrowseFilter
        data_source_filter: BrowseFilter
        data_system_filter: BrowseFilter

        Returns:
        --------
        common.EntitySearchResults: List of entity search results

        :param x_org:
        :param query:
        :param entity_type:
        :param sort_by:
        :param sort_direction:
        :param owner:
        :param created_at_from:
        :param created_at_to:
        :param limit:
        :param offset:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.SearchEntitiesAPIDataSearchGetRequest(
            query=query,
            entity_type=entity_type,
            sort_by=sort_by,
            sort_direction=sort_direction,
            owner=owner,
            created_at_from=created_at_from,
            created_at_to=created_at_to,
            limit=limit,
            offset=offset,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request_async(
            method="GET",
            path="/api/data/search",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="search_entities_api_data_search_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.EntitySearchResults, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)
