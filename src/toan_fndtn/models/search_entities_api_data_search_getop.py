"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .backend_data_constant_sortdirection import BackendDataConstantSortDirection
from .entitysearchsortcolumns import EntitySearchSortColumns
from .entitytype import EntityType
from datetime import datetime
import pydantic
from pydantic import model_serializer
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from toan_fndtn.utils import FieldMetadata, HeaderMetadata, QueryParamMetadata
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SearchEntitiesAPIDataSearchGetRequestTypedDict(TypedDict):
    x_org: str
    query: NotRequired[Nullable[str]]
    entity_type: NotRequired[Nullable[List[EntityType]]]
    sort_by: NotRequired[EntitySearchSortColumns]
    sort_direction: NotRequired[BackendDataConstantSortDirection]
    owner: NotRequired[Nullable[str]]
    created_at_from: NotRequired[Nullable[datetime]]
    created_at_to: NotRequired[Nullable[datetime]]
    limit: NotRequired[int]
    offset: NotRequired[int]
    x_org_override: NotRequired[Nullable[str]]


class SearchEntitiesAPIDataSearchGetRequest(BaseModel):
    x_org: Annotated[
        str,
        pydantic.Field(alias="x-org"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]

    query: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    entity_type: Annotated[
        OptionalNullable[List[EntityType]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    sort_by: Annotated[
        Optional[EntitySearchSortColumns],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    sort_direction: Annotated[
        Optional[BackendDataConstantSortDirection],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    owner: Annotated[
        OptionalNullable[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    created_at_from: Annotated[
        OptionalNullable[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    created_at_to: Annotated[
        OptionalNullable[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 50

    offset: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 0

    x_org_override: Annotated[
        OptionalNullable[str],
        pydantic.Field(alias="x-org-override"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "query",
            "entity_type",
            "sort_by",
            "sort_direction",
            "owner",
            "created_at_from",
            "created_at_to",
            "limit",
            "offset",
            "x-org-override",
        ]
        nullable_fields = [
            "query",
            "entity_type",
            "owner",
            "created_at_from",
            "created_at_to",
            "x-org-override",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
