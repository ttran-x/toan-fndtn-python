"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from toan_fndtn.utils import validate_const
from typing import Any, Dict, List, Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class RunStatusTypedDict(TypedDict):
    r"""Run status."""

    status: str
    attempts: int
    submission_attempts: int
    run_type: Literal["single"]
    container: NotRequired[Nullable[Dict[str, Any]]]
    start: NotRequired[Nullable[datetime]]
    finish: NotRequired[Nullable[datetime]]
    error: NotRequired[Nullable[List[str]]]


class RunStatus(BaseModel):
    r"""Run status."""

    status: str

    attempts: int

    submission_attempts: int

    RUN_TYPE: Annotated[
        Annotated[Literal["single"], AfterValidator(validate_const("single"))],
        pydantic.Field(alias="run_type"),
    ] = "single"

    container: OptionalNullable[Dict[str, Any]] = UNSET

    start: OptionalNullable[datetime] = UNSET

    finish: OptionalNullable[datetime] = UNSET

    error: OptionalNullable[List[str]] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["container", "start", "finish", "error"]
        nullable_fields = ["container", "start", "finish", "error"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
