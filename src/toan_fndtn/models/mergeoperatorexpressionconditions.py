"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .lefttype import LeftType
from .mergecomparisonoperator import MergeComparisonOperator
from .mergepredicate import MergePredicate
from .righttype import RightType
from pydantic import model_serializer
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import Union
from typing_extensions import NotRequired, TypeAliasType, TypedDict


RightSideTypedDict = TypeAliasType("RightSideTypedDict", Union[str, MergePredicate])


RightSide = TypeAliasType("RightSide", Union[str, MergePredicate])


class MergeOperatorExpressionConditionsTypedDict(TypedDict):
    r"""Merge operator expression for matched and non-matched conditions."""

    left_type: LeftType
    r"""Left type of the left field."""
    left_side: str
    right_side: RightSideTypedDict
    right_type: RightType
    r"""Right type of the right field."""
    operator: NotRequired[Nullable[MergeComparisonOperator]]


class MergeOperatorExpressionConditions(BaseModel):
    r"""Merge operator expression for matched and non-matched conditions."""

    left_type: LeftType
    r"""Left type of the left field."""

    left_side: str

    right_side: RightSide

    right_type: RightType
    r"""Right type of the right field."""

    operator: OptionalNullable[MergeComparisonOperator] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["operator"]
        nullable_fields = ["operator"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
