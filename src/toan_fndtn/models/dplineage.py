"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .dplineagedatasetnode import DPLineageDatasetNode, DPLineageDatasetNodeTypedDict
from .dplineagejobnode import DPLineageJobNode, DPLineageJobNodeTypedDict
from .dplineagelink import DPLineageLink, DPLineageLinkTypedDict
from pydantic import Discriminator, Tag
from toan_fndtn.types import BaseModel
from toan_fndtn.utils import get_discriminator
from typing import Any, Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


NodeTypedDict = TypeAliasType(
    "NodeTypedDict", Union[DPLineageDatasetNodeTypedDict, DPLineageJobNodeTypedDict]
)


Node = Annotated[
    Union[
        Annotated[DPLineageDatasetNode, Tag("dataset")],
        Annotated[DPLineageJobNode, Tag("job")],
    ],
    Discriminator(lambda m: get_discriminator(m, "type", "type")),
]


class DPLineageTypedDict(TypedDict):
    r"""DP lineage."""

    ok: NotRequired[bool]
    directed: NotRequired[bool]
    multigraph: NotRequired[bool]
    graph: NotRequired[Dict[str, Any]]
    nodes: NotRequired[List[NodeTypedDict]]
    links: NotRequired[List[DPLineageLinkTypedDict]]


class DPLineage(BaseModel):
    r"""DP lineage."""

    ok: Optional[bool] = True

    directed: Optional[bool] = True

    multigraph: Optional[bool] = False

    graph: Optional[Dict[str, Any]] = None

    nodes: Optional[List[Node]] = None

    links: Optional[List[DPLineageLink]] = None
