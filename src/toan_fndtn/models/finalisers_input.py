"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .appendconfig import AppendConfig, AppendConfigTypedDict
from .mergeconfig_input import MergeConfigInput, MergeConfigInputTypedDict
from .overwriteconfig import OverwriteConfig, OverwriteConfigTypedDict
from .overwritepartitionsconfig import (
    OverwritePartitionsConfig,
    OverwritePartitionsConfigTypedDict,
)
from pydantic import Discriminator, Tag
from toan_fndtn.types import BaseModel
from toan_fndtn.utils import get_discriminator
from typing import Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


FinalisersInputWriteConfigTypedDict = TypeAliasType(
    "FinalisersInputWriteConfigTypedDict",
    Union[
        OverwriteConfigTypedDict,
        OverwritePartitionsConfigTypedDict,
        AppendConfigTypedDict,
        MergeConfigInputTypedDict,
    ],
)


FinalisersInputWriteConfig = Annotated[
    Union[
        Annotated[AppendConfig, Tag("append")],
        Annotated[MergeConfigInput, Tag("merge")],
        Annotated[OverwriteConfig, Tag("overwrite")],
        Annotated[OverwritePartitionsConfig, Tag("overwrite_partitions")],
    ],
    Discriminator(lambda m: get_discriminator(m, "mode", "mode")),
]


class FinalisersInputTypedDict(TypedDict):
    r"""Finalisers model."""

    input: str
    enable_quality: bool
    write_config: FinalisersInputWriteConfigTypedDict
    enable_profiling: bool
    enable_classification: bool


class FinalisersInput(BaseModel):
    r"""Finalisers model."""

    input: str

    enable_quality: bool

    write_config: FinalisersInputWriteConfig

    enable_profiling: bool

    enable_classification: bool
