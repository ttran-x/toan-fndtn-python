"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .backend_data_schema_common_createentity import (
    BackendDataSchemaCommonCreateEntity,
    BackendDataSchemaCommonCreateEntityTypedDict,
)
from .entityinfo import EntityInfo, EntityInfoTypedDict
from .entityparent import EntityParent, EntityParentTypedDict
from pydantic import model_serializer
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing_extensions import NotRequired, TypedDict


class CreateDataProductRequestTypedDict(TypedDict):
    r"""Create data product entity request"""

    entity: BackendDataSchemaCommonCreateEntityTypedDict
    r"""Create entity."""
    entity_info: NotRequired[Nullable[EntityInfoTypedDict]]
    parent: NotRequired[Nullable[EntityParentTypedDict]]
    host_mesh_identifier: NotRequired[Nullable[str]]


class CreateDataProductRequest(BaseModel):
    r"""Create data product entity request"""

    entity: BackendDataSchemaCommonCreateEntity
    r"""Create entity."""

    entity_info: OptionalNullable[EntityInfo] = UNSET

    parent: OptionalNullable[EntityParent] = UNSET

    host_mesh_identifier: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["entity_info", "parent", "host_mesh_identifier"]
        nullable_fields = ["entity_info", "parent", "host_mesh_identifier"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
