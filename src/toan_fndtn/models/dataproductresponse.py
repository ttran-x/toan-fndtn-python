"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .compute import Compute, ComputeTypedDict
from .dataproductentitywithowner import (
    DataProductEntityWithOwner,
    DataProductEntityWithOwnerTypedDict,
)
from .entityinfo import EntityInfo, EntityInfoTypedDict
from .entitylinks import EntityLinks, EntityLinksTypedDict
from .table import Table, TableTypedDict
from pydantic import model_serializer
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List
from typing_extensions import NotRequired, TypedDict


class DataProductResponseTypedDict(TypedDict):
    r"""DataProduct response."""

    entity: DataProductEntityWithOwnerTypedDict
    r"""DataProduct with owner."""
    links: EntityLinksTypedDict
    r"""Entity links."""
    schema_available: bool
    tags: List[str]
    entity_info: NotRequired[Nullable[EntityInfoTypedDict]]
    compute: NotRequired[Nullable[ComputeTypedDict]]
    table: NotRequired[Nullable[TableTypedDict]]


class DataProductResponse(BaseModel):
    r"""DataProduct response."""

    entity: DataProductEntityWithOwner
    r"""DataProduct with owner."""

    links: EntityLinks
    r"""Entity links."""

    schema_available: bool

    tags: List[str]

    entity_info: OptionalNullable[EntityInfo] = UNSET

    compute: OptionalNullable[Compute] = UNSET

    table: OptionalNullable[Table] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["entity_info", "compute", "table"]
        nullable_fields = ["entity_info", "compute", "table"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
