"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .forecastgranularity import ForecastGranularity
from .parametertuningsearchtype import ParameterTuningSearchType
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from toan_fndtn.utils import validate_const
from typing import List, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RegressionTrainingTransformationTypedDict(TypedDict):
    r"""Regression prediction transformation."""

    input: str
    output: str
    timestamp_col: str
    target_col: str
    random_seed: int
    time_features: List[str]
    train_ratio: float
    feature_selection_threshold: float
    enable_parameter_tuning: bool
    forecast_horizon: int
    forecast_granularity: ForecastGranularity
    r"""Enum for forecast granularity."""
    search_type: ParameterTuningSearchType
    r"""Parameter tuning search type."""
    n_configs: int
    n_parallel_jobs: int
    initial_train_size: float
    step_size: float
    num_leaves: List[int]
    max_depth: List[int]
    learning_rate: List[float]
    num_iterations: List[int]
    feature_fraction: List[float]
    bagging_fraction: List[float]
    bagging_freq: List[int]
    lambda_l1: List[float]
    lambda_l2: List[float]
    model_bucket: str
    project_name: str
    transform: Literal["regression_training"]
    feature_cols: NotRequired[Nullable[List[str]]]
    drop_cols: NotRequired[Nullable[List[str]]]
    max_rows: NotRequired[Nullable[int]]
    enable_mlflow: NotRequired[bool]


class RegressionTrainingTransformation(BaseModel):
    r"""Regression prediction transformation."""

    input: str

    output: str

    timestamp_col: str

    target_col: str

    random_seed: int

    time_features: List[str]

    train_ratio: float

    feature_selection_threshold: float

    enable_parameter_tuning: bool

    forecast_horizon: int

    forecast_granularity: ForecastGranularity
    r"""Enum for forecast granularity."""

    search_type: ParameterTuningSearchType
    r"""Parameter tuning search type."""

    n_configs: int

    n_parallel_jobs: int

    initial_train_size: float

    step_size: float

    num_leaves: Annotated[List[int], pydantic.Field(alias="numLeaves")]

    max_depth: Annotated[List[int], pydantic.Field(alias="maxDepth")]

    learning_rate: Annotated[List[float], pydantic.Field(alias="learningRate")]

    num_iterations: Annotated[List[int], pydantic.Field(alias="numIterations")]

    feature_fraction: Annotated[List[float], pydantic.Field(alias="featureFraction")]

    bagging_fraction: Annotated[List[float], pydantic.Field(alias="baggingFraction")]

    bagging_freq: Annotated[List[int], pydantic.Field(alias="baggingFreq")]

    lambda_l1: Annotated[List[float], pydantic.Field(alias="lambdaL1")]

    lambda_l2: Annotated[List[float], pydantic.Field(alias="lambdaL2")]

    model_bucket: str

    project_name: str

    TRANSFORM: Annotated[
        Annotated[
            Literal["regression_training"],
            AfterValidator(validate_const("regression_training")),
        ],
        pydantic.Field(alias="transform"),
    ] = "regression_training"

    feature_cols: OptionalNullable[List[str]] = UNSET

    drop_cols: OptionalNullable[List[str]] = UNSET

    max_rows: OptionalNullable[int] = UNSET

    enable_mlflow: Optional[bool] = False

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["feature_cols", "drop_cols", "max_rows", "enable_mlflow"]
        nullable_fields = ["feature_cols", "drop_cols", "max_rows"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
