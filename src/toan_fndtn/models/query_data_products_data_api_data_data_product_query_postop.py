"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .consumeformat import ConsumeFormat
from .querydataproduct import QueryDataProduct, QueryDataProductTypedDict
import pydantic
from pydantic import model_serializer
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from toan_fndtn.utils import (
    FieldMetadata,
    HeaderMetadata,
    QueryParamMetadata,
    RequestMetadata,
)
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class QueryDataProductsDataAPIDataDataProductQueryPostRequestTypedDict(TypedDict):
    x_org: str
    query_data_product: QueryDataProductTypedDict
    format_: NotRequired[ConsumeFormat]
    x_org_override: NotRequired[Nullable[str]]


class QueryDataProductsDataAPIDataDataProductQueryPostRequest(BaseModel):
    x_org: Annotated[
        str,
        pydantic.Field(alias="x-org"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]

    query_data_product: Annotated[
        QueryDataProduct,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]

    format_: Annotated[
        Optional[ConsumeFormat],
        pydantic.Field(alias="format"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    x_org_override: Annotated[
        OptionalNullable[str],
        pydantic.Field(alias="x-org-override"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["format", "x-org-override"]
        nullable_fields = ["x-org-override"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
