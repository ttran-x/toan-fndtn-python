"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .backend_data_schema_common_createentity import (
    BackendDataSchemaCommonCreateEntity,
    BackendDataSchemaCommonCreateEntityTypedDict,
)
from .connectorparquetparams import (
    ConnectorParquetParams,
    ConnectorParquetParamsTypedDict,
)
from .csvparams import CSVParams, CSVParamsTypedDict
from .dataproductparams import DataProductParams, DataProductParamsTypedDict
from .entityinfo import EntityInfo, EntityInfoTypedDict
from .entityparent import EntityParent, EntityParentTypedDict
from .queryparams import QueryParams, QueryParamsTypedDict
from .syntheticparams import SyntheticParams, SyntheticParamsTypedDict
from .tableparams import TableParams, TableParamsTypedDict
from pydantic import Discriminator, Tag, model_serializer
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from toan_fndtn.utils import get_discriminator
from typing import Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


CreateDataObjectRequestConfigurationTypedDict = TypeAliasType(
    "CreateDataObjectRequestConfigurationTypedDict",
    Union[
        TableParamsTypedDict,
        QueryParamsTypedDict,
        ConnectorParquetParamsTypedDict,
        SyntheticParamsTypedDict,
        DataProductParamsTypedDict,
        CSVParamsTypedDict,
    ],
)


CreateDataObjectRequestConfiguration = Annotated[
    Union[
        Annotated[CSVParams, Tag("csv")],
        Annotated[DataProductParams, Tag("data_product")],
        Annotated[ConnectorParquetParams, Tag("parquet")],
        Annotated[QueryParams, Tag("query")],
        Annotated[SyntheticParams, Tag("synthetic")],
        Annotated[TableParams, Tag("table")],
    ],
    Discriminator(
        lambda m: get_discriminator(m, "data_object_type", "data_object_type")
    ),
]


class CreateDataObjectRequestTypedDict(TypedDict):
    r"""Create data object request."""

    entity: BackendDataSchemaCommonCreateEntityTypedDict
    r"""Create entity."""
    entity_info: NotRequired[Nullable[EntityInfoTypedDict]]
    parent: NotRequired[Nullable[EntityParentTypedDict]]
    configuration: NotRequired[Nullable[CreateDataObjectRequestConfigurationTypedDict]]


class CreateDataObjectRequest(BaseModel):
    r"""Create data object request."""

    entity: BackendDataSchemaCommonCreateEntity
    r"""Create entity."""

    entity_info: OptionalNullable[EntityInfo] = UNSET

    parent: OptionalNullable[EntityParent] = UNSET

    configuration: OptionalNullable[CreateDataObjectRequestConfiguration] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["entity_info", "parent", "configuration"]
        nullable_fields = ["entity_info", "parent", "configuration"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
