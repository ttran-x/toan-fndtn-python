"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from toan_fndtn.utils import validate_const
from typing import Any, Dict, List, Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RegressionTrainingTransformationLSTMTypedDict(TypedDict):
    r"""LSTM regression training transformation."""

    input: str
    output: str
    timestamp_col: str
    model_bucket: str
    project_name: str
    transform: Literal["regression_training_lstm"]
    features_to_predict: NotRequired[Nullable[List[str]]]
    drop_cols: NotRequired[Nullable[List[str]]]
    feature_groups: NotRequired[Nullable[Dict[str, List[str]]]]
    random_seed: NotRequired[int]
    train_ratio: NotRequired[Nullable[float]]
    scale_features: NotRequired[Nullable[bool]]
    validation_split: NotRequired[Nullable[float]]
    sequence_length: NotRequired[Nullable[int]]
    epochs: NotRequired[Nullable[int]]
    patience: NotRequired[Nullable[int]]
    batch_size: NotRequired[Nullable[int]]
    models_config: NotRequired[Nullable[Dict[str, Dict[str, Any]]]]
    enable_mlflow: NotRequired[bool]


class RegressionTrainingTransformationLSTM(BaseModel):
    r"""LSTM regression training transformation."""

    input: str

    output: str

    timestamp_col: str

    model_bucket: str

    project_name: str

    TRANSFORM: Annotated[
        Annotated[
            Literal["regression_training_lstm"],
            AfterValidator(validate_const("regression_training_lstm")),
        ],
        pydantic.Field(alias="transform"),
    ] = "regression_training_lstm"

    features_to_predict: OptionalNullable[List[str]] = UNSET

    drop_cols: OptionalNullable[List[str]] = UNSET

    feature_groups: OptionalNullable[Dict[str, List[str]]] = UNSET

    random_seed: Optional[int] = 42

    train_ratio: OptionalNullable[float] = UNSET

    scale_features: OptionalNullable[bool] = UNSET

    validation_split: OptionalNullable[float] = UNSET

    sequence_length: OptionalNullable[int] = UNSET

    epochs: OptionalNullable[int] = UNSET

    patience: OptionalNullable[int] = UNSET

    batch_size: OptionalNullable[int] = UNSET

    models_config: OptionalNullable[Dict[str, Dict[str, Any]]] = UNSET

    enable_mlflow: Optional[bool] = True

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "features_to_predict",
            "drop_cols",
            "feature_groups",
            "random_seed",
            "train_ratio",
            "scale_features",
            "validation_split",
            "sequence_length",
            "epochs",
            "patience",
            "batch_size",
            "models_config",
            "enable_mlflow",
        ]
        nullable_fields = [
            "features_to_predict",
            "drop_cols",
            "feature_groups",
            "train_ratio",
            "scale_features",
            "validation_split",
            "sequence_length",
            "epochs",
            "patience",
            "batch_size",
            "models_config",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
