"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .createfielddefinition import CreateFieldDefinition, CreateFieldDefinitionTypedDict
from .icebergtableproperties import (
    IcebergTableProperties,
    IcebergTablePropertiesTypedDict,
)
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from toan_fndtn.utils import validate_const
from typing import List, Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class StoredDataProductSchemaTypedDict(TypedDict):
    r"""Stored data product schema."""

    fields: List[CreateFieldDefinitionTypedDict]
    data_product_type: Literal["stored"]
    iceberg_table_properties: NotRequired[Nullable[IcebergTablePropertiesTypedDict]]


class StoredDataProductSchema(BaseModel):
    r"""Stored data product schema."""

    fields: List[CreateFieldDefinition]

    DATA_PRODUCT_TYPE: Annotated[
        Annotated[Literal["stored"], AfterValidator(validate_const("stored"))],
        pydantic.Field(alias="data_product_type"),
    ] = "stored"

    iceberg_table_properties: OptionalNullable[IcebergTableProperties] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["iceberg_table_properties"]
        nullable_fields = ["iceberg_table_properties"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
