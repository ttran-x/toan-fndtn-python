"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .connectionsecret import ConnectionSecret, ConnectionSecretTypedDict
import pydantic
from pydantic.functional_validators import AfterValidator
from toan_fndtn.types import BaseModel
from toan_fndtn.utils import validate_const
from typing import Literal, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


HostTypedDict = TypeAliasType("HostTypedDict", Union[ConnectionSecretTypedDict, str])


Host = TypeAliasType("Host", Union[ConnectionSecret, str])


class DatabaseDataSourceConnectionDetailsTypedDict(TypedDict):
    r"""Database data source connection details."""

    engine: str
    host: HostTypedDict
    port: int
    database: str
    user: ConnectionSecretTypedDict
    r"""Connection secret."""
    password: ConnectionSecretTypedDict
    r"""Connection secret."""
    connection_type: Literal["database"]
    schema_: NotRequired[str]


class DatabaseDataSourceConnectionDetails(BaseModel):
    r"""Database data source connection details."""

    engine: str

    host: Host

    port: int

    database: str

    user: ConnectionSecret
    r"""Connection secret."""

    password: ConnectionSecret
    r"""Connection secret."""

    CONNECTION_TYPE: Annotated[
        Annotated[Literal["database"], AfterValidator(validate_const("database"))],
        pydantic.Field(alias="connection_type"),
    ] = "database"

    schema_: Annotated[Optional[str], pydantic.Field(alias="schema")] = None
