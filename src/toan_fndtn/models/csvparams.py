"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from toan_fndtn.utils import validate_const
from typing import List, Literal, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


PathTypedDict = TypeAliasType("PathTypedDict", Union[str, List[str]])


Path = TypeAliasType("Path", Union[str, List[str]])


class CSVParamsTypedDict(TypedDict):
    r"""CSV params."""

    path: PathTypedDict
    data_object_type: Literal["csv"]
    has_header: NotRequired[Nullable[bool]]
    delimiter: NotRequired[Nullable[str]]
    quote_char: NotRequired[Nullable[str]]
    escape_char: NotRequired[Nullable[str]]
    multi_line: NotRequired[Nullable[bool]]


class CSVParams(BaseModel):
    r"""CSV params."""

    path: Path

    DATA_OBJECT_TYPE: Annotated[
        Annotated[Literal["csv"], AfterValidator(validate_const("csv"))],
        pydantic.Field(alias="data_object_type"),
    ] = "csv"

    has_header: OptionalNullable[bool] = UNSET

    delimiter: OptionalNullable[str] = UNSET

    quote_char: OptionalNullable[str] = UNSET

    escape_char: OptionalNullable[str] = UNSET

    multi_line: OptionalNullable[bool] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "has_header",
            "delimiter",
            "quote_char",
            "escape_char",
            "multi_line",
        ]
        nullable_fields = [
            "has_header",
            "delimiter",
            "quote_char",
            "escape_char",
            "multi_line",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
