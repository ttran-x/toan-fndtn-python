"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .runstatus import RunStatus, RunStatusTypedDict
from .scheduledstatus import ScheduledStatus, ScheduledStatusTypedDict
from pydantic import Discriminator, Tag
from toan_fndtn.types import BaseModel
from toan_fndtn.utils import get_discriminator
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


StatusTypedDict = TypeAliasType(
    "StatusTypedDict", Union[ScheduledStatusTypedDict, RunStatusTypedDict]
)


Status = Annotated[
    Union[
        Annotated[ScheduledStatus, Tag("schedule")], Annotated[RunStatus, Tag("single")]
    ],
    Discriminator(lambda m: get_discriminator(m, "run_type", "run_type")),
]


class ComputeResponseTypedDict(TypedDict):
    r"""Compute response."""

    identifier: str
    urn: str
    name: str
    status: StatusTypedDict
    is_system: NotRequired[bool]


class ComputeResponse(BaseModel):
    r"""Compute response."""

    identifier: str

    urn: str

    name: str

    status: Status

    is_system: Optional[bool] = False
