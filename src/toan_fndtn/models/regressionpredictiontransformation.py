"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .forecastgranularity import ForecastGranularity
from .forecastmethod import ForecastMethod
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from toan_fndtn.utils import validate_const
from typing import Literal, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class RegressionPredictionTransformationTypedDict(TypedDict):
    r"""Regression prediction transformation."""

    input: str
    output: str
    target_col: str
    timestamp_col: str
    model_bucket: str
    project_name: str
    forecast_horizon: int
    forecast_granularity: ForecastGranularity
    r"""Enum for forecast granularity."""
    history_periods: int
    forecast_method: ForecastMethod
    r"""Enum for forecasting method."""
    transform: Literal["regression_prediction"]
    version: NotRequired[Nullable[str]]
    enable_mlflow: NotRequired[bool]


class RegressionPredictionTransformation(BaseModel):
    r"""Regression prediction transformation."""

    input: str

    output: str

    target_col: str

    timestamp_col: str

    model_bucket: str

    project_name: str

    forecast_horizon: int

    forecast_granularity: ForecastGranularity
    r"""Enum for forecast granularity."""

    history_periods: int

    forecast_method: ForecastMethod
    r"""Enum for forecasting method."""

    TRANSFORM: Annotated[
        Annotated[
            Literal["regression_prediction"],
            AfterValidator(validate_const("regression_prediction")),
        ],
        pydantic.Field(alias="transform"),
    ] = "regression_prediction"

    version: OptionalNullable[str] = UNSET

    enable_mlflow: Optional[bool] = False

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["version", "enable_mlflow"]
        nullable_fields = ["version"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
