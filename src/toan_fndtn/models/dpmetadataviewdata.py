"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
import pydantic
from pydantic import model_serializer
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import Any, Dict, List
from typing_extensions import Annotated, NotRequired, TypedDict


class DPMetadataViewDataTypedDict(TypedDict):
    r"""DP metadata view data."""

    identifier: str
    sanitized_name: str
    created: datetime
    last_updated: datetime
    is_active: bool
    tags: List[Any]
    name: Nullable[str]
    description: NotRequired[Nullable[str]]
    owner: NotRequired[Nullable[str]]
    update_frequency: NotRequired[Nullable[str]]
    quality: NotRequired[Nullable[str]]
    schema_: NotRequired[Nullable[List[Any]]]
    relates_to: NotRequired[Nullable[List[Any]]]
    lineage: NotRequired[Nullable[Dict[str, Any]]]
    rows: NotRequired[Nullable[int]]
    columns: NotRequired[Nullable[int]]
    urn: NotRequired[Nullable[str]]
    data_profiling: NotRequired[Nullable[Dict[str, Any]]]
    data_quality: NotRequired[Nullable[List[Any]]]
    data_quality_score: NotRequired[Nullable[float]]
    data_quality_scores_by_dimension: NotRequired[Nullable[Dict[str, Any]]]
    consumers: NotRequired[Nullable[List[Any]]]
    label: NotRequired[Nullable[str]]
    state: NotRequired[Nullable[str]]
    host_mesh_id: NotRequired[Nullable[int]]


class DPMetadataViewData(BaseModel):
    r"""DP metadata view data."""

    identifier: str

    sanitized_name: str

    created: datetime

    last_updated: datetime

    is_active: bool

    tags: List[Any]

    name: Nullable[str]

    description: OptionalNullable[str] = UNSET

    owner: OptionalNullable[str] = UNSET

    update_frequency: OptionalNullable[str] = UNSET

    quality: OptionalNullable[str] = UNSET

    schema_: Annotated[OptionalNullable[List[Any]], pydantic.Field(alias="schema")] = (
        UNSET
    )

    relates_to: OptionalNullable[List[Any]] = UNSET

    lineage: OptionalNullable[Dict[str, Any]] = UNSET

    rows: OptionalNullable[int] = UNSET

    columns: OptionalNullable[int] = UNSET

    urn: OptionalNullable[str] = UNSET

    data_profiling: OptionalNullable[Dict[str, Any]] = UNSET

    data_quality: OptionalNullable[List[Any]] = UNSET

    data_quality_score: OptionalNullable[float] = UNSET

    data_quality_scores_by_dimension: OptionalNullable[Dict[str, Any]] = UNSET

    consumers: OptionalNullable[List[Any]] = UNSET

    label: OptionalNullable[str] = UNSET

    state: OptionalNullable[str] = UNSET

    host_mesh_id: OptionalNullable[int] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "owner",
            "update_frequency",
            "quality",
            "schema",
            "relates_to",
            "lineage",
            "rows",
            "columns",
            "urn",
            "data_profiling",
            "data_quality",
            "data_quality_score",
            "data_quality_scores_by_dimension",
            "consumers",
            "label",
            "state",
            "host_mesh_id",
        ]
        nullable_fields = [
            "description",
            "owner",
            "update_frequency",
            "quality",
            "schema",
            "relates_to",
            "lineage",
            "rows",
            "columns",
            "urn",
            "data_profiling",
            "data_quality",
            "data_quality_score",
            "data_quality_scores_by_dimension",
            "name",
            "consumers",
            "label",
            "state",
            "host_mesh_id",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
