"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .fielddatatype import FieldDataType, FieldDataTypeTypedDict
from pydantic import model_serializer
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class FieldDefinitionTemplateTypedDict(TypedDict):
    r"""Field definition template."""

    name: str
    data_type: FieldDataTypeTypedDict
    r"""Field data type."""
    description: NotRequired[Nullable[str]]
    primary: NotRequired[bool]
    optional: NotRequired[bool]
    classification_name: NotRequired[Nullable[str]]
    r"""Classification name"""
    sensitivity_names: NotRequired[Nullable[List[str]]]
    r"""List of sensitivity names"""


class FieldDefinitionTemplate(BaseModel):
    r"""Field definition template."""

    name: str

    data_type: FieldDataType
    r"""Field data type."""

    description: OptionalNullable[str] = UNSET

    primary: Optional[bool] = False

    optional: Optional[bool] = False

    classification_name: OptionalNullable[str] = UNSET
    r"""Classification name"""

    sensitivity_names: OptionalNullable[List[str]] = UNSET
    r"""List of sensitivity names"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "primary",
            "optional",
            "classification_name",
            "sensitivity_names",
        ]
        nullable_fields = ["description", "classification_name", "sensitivity_names"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
