"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .assignee import Assignee, AssigneeTypedDict
from .backend_data_model_entitystate import (
    BackendDataModelEntityState,
    BackendDataModelEntityStateTypedDict,
)
from datetime import datetime
from pydantic import model_serializer
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import List, Optional
from typing_extensions import NotRequired, TypedDict


class MeshTypedDict(TypedDict):
    r"""Mesh model."""

    id: int
    identifier: str
    organization_id: int
    urn: str
    name: str
    sanitized_name: str
    label: str
    description: str
    created_at: datetime
    state: BackendDataModelEntityStateTypedDict
    r"""Entity state model."""
    purpose: str
    assignees: List[AssigneeTypedDict]
    security_policy: List[str]
    is_system: NotRequired[bool]
    entity_info_id: NotRequired[Nullable[int]]
    is_pinned: NotRequired[bool]


class Mesh(BaseModel):
    r"""Mesh model."""

    id: int

    identifier: str

    organization_id: int

    urn: str

    name: str

    sanitized_name: str

    label: str

    description: str

    created_at: datetime

    state: BackendDataModelEntityState
    r"""Entity state model."""

    purpose: str

    assignees: List[Assignee]

    security_policy: List[str]

    is_system: Optional[bool] = False

    entity_info_id: OptionalNullable[int] = UNSET

    is_pinned: Optional[bool] = False

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["is_system", "entity_info_id", "is_pinned"]
        nullable_fields = ["entity_info_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
