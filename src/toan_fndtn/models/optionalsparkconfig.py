"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from pydantic import model_serializer
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class OptionalSparkConfigTypedDict(TypedDict):
    r"""OptionalSparkConfig model."""

    docker_tag: NotRequired[str]
    executor_core_request: NotRequired[str]
    executor_core_limit: NotRequired[str]
    executor_instances: NotRequired[int]
    min_executor_instances: NotRequired[int]
    max_executor_instances: NotRequired[Nullable[int]]
    executor_memory: NotRequired[str]
    driver_core_request: NotRequired[str]
    driver_core_limit: NotRequired[str]
    driver_memory: NotRequired[str]


class OptionalSparkConfig(BaseModel):
    r"""OptionalSparkConfig model."""

    docker_tag: Optional[str] = "0.1.1"

    executor_core_request: Optional[str] = "100m"

    executor_core_limit: Optional[str] = "1000m"

    executor_instances: Optional[int] = 1

    min_executor_instances: Optional[int] = 1

    max_executor_instances: OptionalNullable[int] = UNSET

    executor_memory: Optional[str] = "512m"

    driver_core_request: Optional[str] = "0.1"

    driver_core_limit: Optional[str] = "800m"

    driver_memory: Optional[str] = "512m"

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "docker_tag",
            "executor_core_request",
            "executor_core_limit",
            "executor_instances",
            "min_executor_instances",
            "max_executor_instances",
            "executor_memory",
            "driver_core_request",
            "driver_core_limit",
            "driver_memory",
        ]
        nullable_fields = ["max_executor_instances"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
