"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from pydantic import model_serializer
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from typing import Any, Dict
from typing_extensions import NotRequired, TypedDict


class DPLineageComputeTransformationDataTypedDict(TypedDict):
    r"""DP lineage spark transformation data."""

    uuid: str
    created_at: datetime
    updated_at: datetime
    type: str
    name: str
    plan_uuid: NotRequired[Nullable[str]]
    job_uuid: NotRequired[Nullable[str]]
    raw: NotRequired[Nullable[Dict[str, Any]]]
    checksum: NotRequired[Nullable[str]]
    identifier: NotRequired[Nullable[str]]
    params: NotRequired[Nullable[Dict[str, Any]]]
    meta: NotRequired[Nullable[Dict[str, Any]]]
    run_uuid: NotRequired[Nullable[str]]


class DPLineageComputeTransformationData(BaseModel):
    r"""DP lineage spark transformation data."""

    uuid: str

    created_at: datetime

    updated_at: datetime

    type: str

    name: str

    plan_uuid: OptionalNullable[str] = UNSET

    job_uuid: OptionalNullable[str] = UNSET

    raw: OptionalNullable[Dict[str, Any]] = UNSET

    checksum: OptionalNullable[str] = UNSET

    identifier: OptionalNullable[str] = UNSET

    params: OptionalNullable[Dict[str, Any]] = UNSET

    meta: OptionalNullable[Dict[str, Any]] = UNSET

    run_uuid: OptionalNullable[str] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "plan_uuid",
            "job_uuid",
            "raw",
            "checksum",
            "identifier",
            "params",
            "meta",
            "run_uuid",
        ]
        nullable_fields = [
            "plan_uuid",
            "job_uuid",
            "raw",
            "checksum",
            "identifier",
            "params",
            "meta",
            "run_uuid",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
