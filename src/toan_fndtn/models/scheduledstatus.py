"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
import pydantic
from pydantic import model_serializer
from pydantic.functional_validators import AfterValidator
from toan_fndtn.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from toan_fndtn.utils import validate_const
from typing import List, Literal
from typing_extensions import Annotated, NotRequired, TypedDict


class ScheduledStatusTypedDict(TypedDict):
    r"""Scheduled status."""

    schedule_state: str
    run_type: Literal["schedule"]
    last_run: NotRequired[Nullable[str]]
    last_run_name: NotRequired[Nullable[str]]
    next_run: NotRequired[Nullable[str]]
    past_successful_run_names: NotRequired[Nullable[List[str]]]


class ScheduledStatus(BaseModel):
    r"""Scheduled status."""

    schedule_state: str

    RUN_TYPE: Annotated[
        Annotated[Literal["schedule"], AfterValidator(validate_const("schedule"))],
        pydantic.Field(alias="run_type"),
    ] = "schedule"

    last_run: OptionalNullable[str] = UNSET

    last_run_name: OptionalNullable[str] = UNSET

    next_run: OptionalNullable[str] = UNSET

    past_successful_run_names: OptionalNullable[List[str]] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "last_run",
            "last_run_name",
            "next_run",
            "past_successful_run_names",
        ]
        nullable_fields = [
            "last_run",
            "last_run_name",
            "next_run",
            "past_successful_run_names",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
