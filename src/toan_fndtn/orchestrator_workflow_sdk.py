"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from toan_fndtn import errors, models, utils
from toan_fndtn._hooks import HookContext
from toan_fndtn.types import Nullable, OptionalNullable, UNSET
from toan_fndtn.utils import get_security_from_env
from toan_fndtn.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, Dict, Mapping, Optional


class OrchestratorWorkflowSDK(BaseSDK):
    def get_orchestrator_workflow_api_data_orchestrator_workflow_get(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.OrchestratorWorkflow:
        r"""Get workflow details and tasks

        Get workflow details and related Luigi tasks.

        Args:
        identifier: Workflow identifier.
        context: Request context.

        Returns:
        Workflow: Workflow with tasks.

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetOrchestratorWorkflowAPIDataOrchestratorWorkflowGetRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request(
            method="GET",
            path="/api/data/orchestrator_workflow",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_orchestrator_workflow_api_data_orchestrator_workflow_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.OrchestratorWorkflow, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def get_orchestrator_workflow_api_data_orchestrator_workflow_get_async(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.OrchestratorWorkflow:
        r"""Get workflow details and tasks

        Get workflow details and related Luigi tasks.

        Args:
        identifier: Workflow identifier.
        context: Request context.

        Returns:
        Workflow: Workflow with tasks.

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetOrchestratorWorkflowAPIDataOrchestratorWorkflowGetRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request_async(
            method="GET",
            path="/api/data/orchestrator_workflow",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_orchestrator_workflow_api_data_orchestrator_workflow_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.OrchestratorWorkflow, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def update_orchestrator_workflow_api_data_orchestrator_workflow_put(
        self,
        *,
        identifier: str,
        x_org: str,
        status: str,
        config: Nullable[Dict[str, Any]],
        error_message: Nullable[str],
        updated_at: Nullable[datetime],
        completed_at: Nullable[datetime],
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.OrchestratorWorkflow:
        r"""Update a workflow

        Update a workflow.

        Args:
        identifier: Workflow identifier.
        data: Updated workflow data.
        context: Request context.

        Returns:
        Workflow: Updated workflow.

        :param identifier:
        :param x_org:
        :param status:
        :param config:
        :param error_message:
        :param updated_at:
        :param completed_at:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = (
            models.UpdateOrchestratorWorkflowAPIDataOrchestratorWorkflowPutRequest(
                identifier=identifier,
                x_org=x_org,
                x_org_override=x_org_override,
                update_orchestrator_workflow=models.UpdateOrchestratorWorkflow(
                    status=status,
                    config=config,
                    error_message=error_message,
                    updated_at=updated_at,
                    completed_at=completed_at,
                ),
            )
        )

        req = self._build_request(
            method="PUT",
            path="/api/data/orchestrator_workflow",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_orchestrator_workflow,
                False,
                False,
                "json",
                models.UpdateOrchestratorWorkflow,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_orchestrator_workflow_api_data_orchestrator_workflow_put",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.OrchestratorWorkflow, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def update_orchestrator_workflow_api_data_orchestrator_workflow_put_async(
        self,
        *,
        identifier: str,
        x_org: str,
        status: str,
        config: Nullable[Dict[str, Any]],
        error_message: Nullable[str],
        updated_at: Nullable[datetime],
        completed_at: Nullable[datetime],
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.OrchestratorWorkflow:
        r"""Update a workflow

        Update a workflow.

        Args:
        identifier: Workflow identifier.
        data: Updated workflow data.
        context: Request context.

        Returns:
        Workflow: Updated workflow.

        :param identifier:
        :param x_org:
        :param status:
        :param config:
        :param error_message:
        :param updated_at:
        :param completed_at:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = (
            models.UpdateOrchestratorWorkflowAPIDataOrchestratorWorkflowPutRequest(
                identifier=identifier,
                x_org=x_org,
                x_org_override=x_org_override,
                update_orchestrator_workflow=models.UpdateOrchestratorWorkflow(
                    status=status,
                    config=config,
                    error_message=error_message,
                    updated_at=updated_at,
                    completed_at=completed_at,
                ),
            )
        )

        req = self._build_request_async(
            method="PUT",
            path="/api/data/orchestrator_workflow",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_orchestrator_workflow,
                False,
                False,
                "json",
                models.UpdateOrchestratorWorkflow,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_orchestrator_workflow_api_data_orchestrator_workflow_put",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.OrchestratorWorkflow, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def create_orchestrator_workflow_api_data_orchestrator_workflow_post(
        self,
        *,
        x_org: str,
        run_type: str,
        data_product_identifier: str,
        created_by: Nullable[str],
        name: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.OrchestratorWorkflow:
        r"""Create and start a workflow run

        Create and start a workflow run.

        Args:
        data: Workflow creation data.
        context: Request context.
        token: Authorization token with organization information.

        Returns:
        Workflow: Created workflow.

        :param x_org:
        :param run_type:
        :param data_product_identifier:
        :param created_by:
        :param name:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = (
            models.CreateOrchestratorWorkflowAPIDataOrchestratorWorkflowPostRequest(
                x_org=x_org,
                x_org_override=x_org_override,
                create_orchestrator_workflow=models.CreateOrchestratorWorkflow(
                    run_type=run_type,
                    data_product_identifier=data_product_identifier,
                    created_by=created_by,
                    name=name,
                ),
            )
        )

        req = self._build_request(
            method="POST",
            path="/api/data/orchestrator_workflow",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.create_orchestrator_workflow,
                False,
                False,
                "json",
                models.CreateOrchestratorWorkflow,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_orchestrator_workflow_api_data_orchestrator_workflow_post",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.OrchestratorWorkflow, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def create_orchestrator_workflow_api_data_orchestrator_workflow_post_async(
        self,
        *,
        x_org: str,
        run_type: str,
        data_product_identifier: str,
        created_by: Nullable[str],
        name: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.OrchestratorWorkflow:
        r"""Create and start a workflow run

        Create and start a workflow run.

        Args:
        data: Workflow creation data.
        context: Request context.
        token: Authorization token with organization information.

        Returns:
        Workflow: Created workflow.

        :param x_org:
        :param run_type:
        :param data_product_identifier:
        :param created_by:
        :param name:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = (
            models.CreateOrchestratorWorkflowAPIDataOrchestratorWorkflowPostRequest(
                x_org=x_org,
                x_org_override=x_org_override,
                create_orchestrator_workflow=models.CreateOrchestratorWorkflow(
                    run_type=run_type,
                    data_product_identifier=data_product_identifier,
                    created_by=created_by,
                    name=name,
                ),
            )
        )

        req = self._build_request_async(
            method="POST",
            path="/api/data/orchestrator_workflow",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.create_orchestrator_workflow,
                False,
                False,
                "json",
                models.CreateOrchestratorWorkflow,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_orchestrator_workflow_api_data_orchestrator_workflow_post",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.OrchestratorWorkflow, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def delete_orchestrator_workflow_api_data_orchestrator_workflow_delete(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.OrchestratorWorkflow:
        r"""Cancel a workflow run

        Cancel a workflow run.

        Args:
        identifier: Workflow identifier.
        context: Request context.

        Returns:
        Workflow: Cancelled workflow.

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = (
            models.DeleteOrchestratorWorkflowAPIDataOrchestratorWorkflowDeleteRequest(
                identifier=identifier,
                x_org=x_org,
                x_org_override=x_org_override,
            )
        )

        req = self._build_request(
            method="DELETE",
            path="/api/data/orchestrator_workflow",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="delete_orchestrator_workflow_api_data_orchestrator_workflow_delete",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.OrchestratorWorkflow, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def delete_orchestrator_workflow_api_data_orchestrator_workflow_delete_async(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.OrchestratorWorkflow:
        r"""Cancel a workflow run

        Cancel a workflow run.

        Args:
        identifier: Workflow identifier.
        context: Request context.

        Returns:
        Workflow: Cancelled workflow.

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = (
            models.DeleteOrchestratorWorkflowAPIDataOrchestratorWorkflowDeleteRequest(
                identifier=identifier,
                x_org=x_org,
                x_org_override=x_org_override,
            )
        )

        req = self._build_request_async(
            method="DELETE",
            path="/api/data/orchestrator_workflow",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="delete_orchestrator_workflow_api_data_orchestrator_workflow_delete",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.OrchestratorWorkflow, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def get_orchestrator_workflow_graph_api_data_orchestrator_workflow_graph_get(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Dict[str, Any]:
        r"""Get workflow dependency graph and task statuses

        Get the workflow dependency graph and task statuses.

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetOrchestratorWorkflowGraphAPIDataOrchestratorWorkflowGraphGetRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request(
            method="GET",
            path="/api/data/orchestrator_workflow/graph",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_orchestrator_workflow_graph_api_data_orchestrator_workflow_graph_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(Dict[str, Any], http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def get_orchestrator_workflow_graph_api_data_orchestrator_workflow_graph_get_async(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> Dict[str, Any]:
        r"""Get workflow dependency graph and task statuses

        Get the workflow dependency graph and task statuses.

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetOrchestratorWorkflowGraphAPIDataOrchestratorWorkflowGraphGetRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request_async(
            method="GET",
            path="/api/data/orchestrator_workflow/graph",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_orchestrator_workflow_graph_api_data_orchestrator_workflow_graph_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(Dict[str, Any], http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def list_workflows_api_data_orchestrator_workflow_list_get(
        self,
        *,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.OrchestratorWorkflows:
        r"""List all workflow runs

        List all workflow runs.

        Args:
        context: Request context.

        Returns:
        WorkflowList: List of workflows.

        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListWorkflowsAPIDataOrchestratorWorkflowListGetRequest(
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request(
            method="GET",
            path="/api/data/orchestrator_workflow/list",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="list_workflows_api_data_orchestrator_workflow_list_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.OrchestratorWorkflows, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def list_workflows_api_data_orchestrator_workflow_list_get_async(
        self,
        *,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.OrchestratorWorkflows:
        r"""List all workflow runs

        List all workflow runs.

        Args:
        context: Request context.

        Returns:
        WorkflowList: List of workflows.

        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListWorkflowsAPIDataOrchestratorWorkflowListGetRequest(
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request_async(
            method="GET",
            path="/api/data/orchestrator_workflow/list",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="list_workflows_api_data_orchestrator_workflow_list_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.OrchestratorWorkflows, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)
