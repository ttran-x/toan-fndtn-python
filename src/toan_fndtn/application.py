"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from toan_fndtn import errors, models, utils
from toan_fndtn._hooks import HookContext
from toan_fndtn.types import OptionalNullable, UNSET
from toan_fndtn.utils import get_security_from_env
from toan_fndtn.utils.unmarshal_json_response import unmarshal_json_response
from typing import Any, List, Mapping, Optional, Union


class Application(BaseSDK):
    def get_entities_api_data_application_list_get(
        self,
        *,
        x_org: str,
        has_child: OptionalNullable[bool] = UNSET,
        has_parent: OptionalNullable[bool] = UNSET,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ApplicationEntityList:
        r"""Get list of element 'application'

        Get list of applications.

        Args:
        -----
        context: CurrentContext
        has_child: bool | None
        has_parent: bool | None
        browse_filter: BrowseFilter
        token: TokenData

        Returns:
        --------
        application.ApplicationEntityList:  application.ApplicationEntityList

        :param x_org:
        :param has_child:
        :param has_parent:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetEntitiesAPIDataApplicationListGetRequest(
            has_child=has_child,
            has_parent=has_parent,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request(
            method="GET",
            path="/api/data/application/list",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_entities_api_data_application_list_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ApplicationEntityList, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def get_entities_api_data_application_list_get_async(
        self,
        *,
        x_org: str,
        has_child: OptionalNullable[bool] = UNSET,
        has_parent: OptionalNullable[bool] = UNSET,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ApplicationEntityList:
        r"""Get list of element 'application'

        Get list of applications.

        Args:
        -----
        context: CurrentContext
        has_child: bool | None
        has_parent: bool | None
        browse_filter: BrowseFilter
        token: TokenData

        Returns:
        --------
        application.ApplicationEntityList:  application.ApplicationEntityList

        :param x_org:
        :param has_child:
        :param has_parent:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetEntitiesAPIDataApplicationListGetRequest(
            has_child=has_child,
            has_parent=has_parent,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request_async(
            method="GET",
            path="/api/data/application/list",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_entities_api_data_application_list_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ApplicationEntityList, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def get_entities_for_query_api_data_application_list_query_get(
        self,
        *,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ApplicationForQueryList:
        r"""Get list of element 'application' with details on parent `data_product` user can consume

        Get list of applications with details on data products linked to them that can be queried by the user.

        Args:
        -----
        request: fastapi.Request
        context: CurrentContext
        browse_filter: BrowseFilter
        data_product_filter: BrowseFilter
        access_validator: AccessValidator
        token: TokenData

        Returns:
        --------
        application.ApplicationForQueryList:  application.ApplicationForQueryList

        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetEntitiesForQueryAPIDataApplicationListQueryGetRequest(
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request(
            method="GET",
            path="/api/data/application/list/query",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_entities_for_query_api_data_application_list_query_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ApplicationForQueryList, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def get_entities_for_query_api_data_application_list_query_get_async(
        self,
        *,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ApplicationForQueryList:
        r"""Get list of element 'application' with details on parent `data_product` user can consume

        Get list of applications with details on data products linked to them that can be queried by the user.

        Args:
        -----
        request: fastapi.Request
        context: CurrentContext
        browse_filter: BrowseFilter
        data_product_filter: BrowseFilter
        access_validator: AccessValidator
        token: TokenData

        Returns:
        --------
        application.ApplicationForQueryList:  application.ApplicationForQueryList

        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetEntitiesForQueryAPIDataApplicationListQueryGetRequest(
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request_async(
            method="GET",
            path="/api/data/application/list/query",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_entities_for_query_api_data_application_list_query_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ApplicationForQueryList, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def get_entity_api_data_application_get(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ApplicationResponse:
        r"""Get specific element 'application' by identifier

        Get specific application entity by identifier.

        Args:
        -----
        identifier: identifier
        db_session: db_session
        _token: _token

        Returns:
        --------
        application.ApplicationResponse: returns application.ApplicationResponse

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetEntityAPIDataApplicationGetRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request(
            method="GET",
            path="/api/data/application",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_entity_api_data_application_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ApplicationResponse, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def get_entity_api_data_application_get_async(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ApplicationResponse:
        r"""Get specific element 'application' by identifier

        Get specific application entity by identifier.

        Args:
        -----
        identifier: identifier
        db_session: db_session
        _token: _token

        Returns:
        --------
        application.ApplicationResponse: returns application.ApplicationResponse

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetEntityAPIDataApplicationGetRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request_async(
            method="GET",
            path="/api/data/application",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_entity_api_data_application_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ApplicationResponse, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def update_entity_api_data_application_put(
        self,
        *,
        identifier: str,
        x_org: str,
        entity: Union[
            models.BackendDataSchemaApplicationCreateEntity,
            models.BackendDataSchemaApplicationCreateEntityTypedDict,
        ],
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ApplicationEntity:
        r"""Update specific element 'application' by identifier

        Update specific application entity by identifier.

        Args:
        -----
        identifier: UUID
        context: CurrentContext
        emitter: ApplicationEvent
        data: common.UpdateEntityRequest
        token: TokenData

        Returns:
        -------
        application.ApplicationEntity: returns application.ApplicationEntity

        :param identifier:
        :param x_org:
        :param entity: Create application entity.
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateEntityAPIDataApplicationPutRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
            update_application_request=models.UpdateApplicationRequest(
                entity=utils.get_pydantic_model(
                    entity, models.BackendDataSchemaApplicationCreateEntity
                ),
            ),
        )

        req = self._build_request(
            method="PUT",
            path="/api/data/application",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_application_request,
                False,
                False,
                "json",
                models.UpdateApplicationRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_entity_api_data_application_put",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ApplicationEntity, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def update_entity_api_data_application_put_async(
        self,
        *,
        identifier: str,
        x_org: str,
        entity: Union[
            models.BackendDataSchemaApplicationCreateEntity,
            models.BackendDataSchemaApplicationCreateEntityTypedDict,
        ],
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ApplicationEntity:
        r"""Update specific element 'application' by identifier

        Update specific application entity by identifier.

        Args:
        -----
        identifier: UUID
        context: CurrentContext
        emitter: ApplicationEvent
        data: common.UpdateEntityRequest
        token: TokenData

        Returns:
        -------
        application.ApplicationEntity: returns application.ApplicationEntity

        :param identifier:
        :param x_org:
        :param entity: Create application entity.
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateEntityAPIDataApplicationPutRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
            update_application_request=models.UpdateApplicationRequest(
                entity=utils.get_pydantic_model(
                    entity, models.BackendDataSchemaApplicationCreateEntity
                ),
            ),
        )

        req = self._build_request_async(
            method="PUT",
            path="/api/data/application",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.update_application_request,
                False,
                False,
                "json",
                models.UpdateApplicationRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_entity_api_data_application_put",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ApplicationEntity, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def create_entity_api_data_application_post(
        self,
        *,
        x_org: str,
        entity: Union[
            models.BackendDataSchemaApplicationCreateEntity,
            models.BackendDataSchemaApplicationCreateEntityTypedDict,
        ],
        x_org_override: OptionalNullable[str] = UNSET,
        entity_info: OptionalNullable[
            Union[models.EntityInfo, models.EntityInfoTypedDict]
        ] = UNSET,
        parent: OptionalNullable[
            Union[models.EntityParent, models.EntityParentTypedDict]
        ] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ApplicationEntity:
        r"""Create a new 'application' element.

        Create a new application entity.

        Args:
        -----
        context: CurrentContext
        emitter: ApplicationEvent
        data: CreateApplicationRequest
        token: TokenData

        Returns:
        --------
        application.ApplicationEntity: returns application.ApplicationEntity

        :param x_org:
        :param entity: Create application entity.
        :param x_org_override:
        :param entity_info:
        :param parent:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateEntityAPIDataApplicationPostRequest(
            x_org=x_org,
            x_org_override=x_org_override,
            create_application_request=models.CreateApplicationRequest(
                entity=utils.get_pydantic_model(
                    entity, models.BackendDataSchemaApplicationCreateEntity
                ),
                entity_info=utils.get_pydantic_model(
                    entity_info, OptionalNullable[models.EntityInfo]
                ),
                parent=utils.get_pydantic_model(
                    parent, OptionalNullable[models.EntityParent]
                ),
            ),
        )

        req = self._build_request(
            method="POST",
            path="/api/data/application",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.create_application_request,
                False,
                False,
                "json",
                models.CreateApplicationRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_entity_api_data_application_post",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ApplicationEntity, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def create_entity_api_data_application_post_async(
        self,
        *,
        x_org: str,
        entity: Union[
            models.BackendDataSchemaApplicationCreateEntity,
            models.BackendDataSchemaApplicationCreateEntityTypedDict,
        ],
        x_org_override: OptionalNullable[str] = UNSET,
        entity_info: OptionalNullable[
            Union[models.EntityInfo, models.EntityInfoTypedDict]
        ] = UNSET,
        parent: OptionalNullable[
            Union[models.EntityParent, models.EntityParentTypedDict]
        ] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ApplicationEntity:
        r"""Create a new 'application' element.

        Create a new application entity.

        Args:
        -----
        context: CurrentContext
        emitter: ApplicationEvent
        data: CreateApplicationRequest
        token: TokenData

        Returns:
        --------
        application.ApplicationEntity: returns application.ApplicationEntity

        :param x_org:
        :param entity: Create application entity.
        :param x_org_override:
        :param entity_info:
        :param parent:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.CreateEntityAPIDataApplicationPostRequest(
            x_org=x_org,
            x_org_override=x_org_override,
            create_application_request=models.CreateApplicationRequest(
                entity=utils.get_pydantic_model(
                    entity, models.BackendDataSchemaApplicationCreateEntity
                ),
                entity_info=utils.get_pydantic_model(
                    entity_info, OptionalNullable[models.EntityInfo]
                ),
                parent=utils.get_pydantic_model(
                    parent, OptionalNullable[models.EntityParent]
                ),
            ),
        )

        req = self._build_request_async(
            method="POST",
            path="/api/data/application",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.create_application_request,
                False,
                False,
                "json",
                models.CreateApplicationRequest,
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="create_entity_api_data_application_post",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.ApplicationEntity, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def delete_entity_api_data_application_delete(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BackendDataSchemaCommonOK:
        r"""Delete specific element 'application' by identifier

        Delete specific application entity by identifier.

        Args:
        -----
        identifier: UUID
        context: CurrentContext
        emitter: ApplicationEvent
        token: TokenData

        Returns:
        --------
        common.OK: returns common.OK

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteEntityAPIDataApplicationDeleteRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request(
            method="DELETE",
            path="/api/data/application",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="delete_entity_api_data_application_delete",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.BackendDataSchemaCommonOK, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def delete_entity_api_data_application_delete_async(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.BackendDataSchemaCommonOK:
        r"""Delete specific element 'application' by identifier

        Delete specific application entity by identifier.

        Args:
        -----
        identifier: UUID
        context: CurrentContext
        emitter: ApplicationEvent
        token: TokenData

        Returns:
        --------
        common.OK: returns common.OK

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.DeleteEntityAPIDataApplicationDeleteRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request_async(
            method="DELETE",
            path="/api/data/application",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="delete_entity_api_data_application_delete",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.BackendDataSchemaCommonOK, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def get_entity_info_api_data_application_info_get(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.EntityInfo:
        r"""Get specific entity 'application' info by identifier

        Get specific entity application info by identifier.

        Args:
        -----
        identifier: UUID
        context: CurrentContext
        _token: TokenData

        Returns:
        --------
        common.EntityInfo: common.EntityInfo

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetEntityInfoAPIDataApplicationInfoGetRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request(
            method="GET",
            path="/api/data/application/info",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_entity_info_api_data_application_info_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.EntityInfo, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def get_entity_info_api_data_application_info_get_async(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.EntityInfo:
        r"""Get specific entity 'application' info by identifier

        Get specific entity application info by identifier.

        Args:
        -----
        identifier: UUID
        context: CurrentContext
        _token: TokenData

        Returns:
        --------
        common.EntityInfo: common.EntityInfo

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetEntityInfoAPIDataApplicationInfoGetRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request_async(
            method="GET",
            path="/api/data/application/info",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_entity_info_api_data_application_info_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.EntityInfo, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def update_entity_info_api_data_application_info_put(
        self,
        *,
        identifier: str,
        x_org: str,
        owner: str,
        contact_ids: List[str],
        links: List[str],
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.EntityInfo:
        r"""Update specific entity 'application' info by identifier

        Update specific entity application info by identifier.

        Args:
        -----
        identifier: UUID
        data: common.EntityInfo
        context: CurrentContext
        emitter: ApplicationEvent
        token: TokenData

        Returns:
        --------
        common.EntityInfo: common.EntityInfo

        :param identifier:
        :param x_org:
        :param owner:
        :param contact_ids:
        :param links:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateEntityInfoAPIDataApplicationInfoPutRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
            entity_info=models.EntityInfo(
                owner=owner,
                contact_ids=contact_ids,
                links=links,
            ),
        )

        req = self._build_request(
            method="PUT",
            path="/api/data/application/info",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.entity_info, False, False, "json", models.EntityInfo
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_entity_info_api_data_application_info_put",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.EntityInfo, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def update_entity_info_api_data_application_info_put_async(
        self,
        *,
        identifier: str,
        x_org: str,
        owner: str,
        contact_ids: List[str],
        links: List[str],
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.EntityInfo:
        r"""Update specific entity 'application' info by identifier

        Update specific entity application info by identifier.

        Args:
        -----
        identifier: UUID
        data: common.EntityInfo
        context: CurrentContext
        emitter: ApplicationEvent
        token: TokenData

        Returns:
        --------
        common.EntityInfo: common.EntityInfo

        :param identifier:
        :param x_org:
        :param owner:
        :param contact_ids:
        :param links:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.UpdateEntityInfoAPIDataApplicationInfoPutRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
            entity_info=models.EntityInfo(
                owner=owner,
                contact_ids=contact_ids,
                links=links,
            ),
        )

        req = self._build_request_async(
            method="PUT",
            path="/api/data/application/info",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request.entity_info, False, False, "json", models.EntityInfo
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="update_entity_info_api_data_application_info_put",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.EntityInfo, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    def get_entity_links_api_data_application_link_get(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.EntityLinks:
        r"""Get specific entity 'application' links by identifier

        Get specific entity application links by identifier.

        Args:
        -----
        identifier: UUID
        context: CurrentContext
        _token: TokenData

        Returns:
        --------
        common.EntityLinks: common.EntityLinks

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetEntityLinksAPIDataApplicationLinkGetRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request(
            method="GET",
            path="/api/data/application/link",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_entity_links_api_data_application_link_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.EntityLinks, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)

    async def get_entity_links_api_data_application_link_get_async(
        self,
        *,
        identifier: str,
        x_org: str,
        x_org_override: OptionalNullable[str] = UNSET,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.EntityLinks:
        r"""Get specific entity 'application' links by identifier

        Get specific entity application links by identifier.

        Args:
        -----
        identifier: UUID
        context: CurrentContext
        _token: TokenData

        Returns:
        --------
        common.EntityLinks: common.EntityLinks

        :param identifier:
        :param x_org:
        :param x_org_override:
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetEntityLinksAPIDataApplicationLinkGetRequest(
            identifier=identifier,
            x_org=x_org,
            x_org_override=x_org_override,
        )

        req = self._build_request_async(
            method="GET",
            path="/api/data/application/link",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                config=self.sdk_configuration,
                base_url=base_url or "",
                operation_id="get_entity_links_api_data_application_link_get",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["422", "4XX", "5XX"],
            retry_config=retry_config,
        )

        response_data: Any = None
        if utils.match_response(http_res, "200", "application/json"):
            return unmarshal_json_response(models.EntityLinks, http_res)
        if utils.match_response(http_res, "422", "application/json"):
            response_data = unmarshal_json_response(
                errors.HTTPValidationErrorData, http_res
            )
            raise errors.HTTPValidationError(response_data, http_res)
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.ToanFndtnDefaultError(
                "API error occurred", http_res, http_res_text
            )

        raise errors.ToanFndtnDefaultError("Unexpected response received", http_res)
